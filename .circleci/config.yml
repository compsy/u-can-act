defaults: &defaults
  docker:
    - image: circleci/ruby:2.4.3-node-browsers
    - image: circleci/redis
      command: redis-server --requirepass redispassword
      environment:
        TZ: "/usr/share/zoneinfo/Europe/Amsterdam"
    - image: circleci/postgres:9-alpine
      environment:
        POSTGRES_USER: circleci
        POSTGRES_PASSWORD: ""
        TZ: "/usr/share/zoneinfo/Europe/Amsterdam"
    - image: circleci/mongo:3.6
      environment:
        TZ: "/usr/share/zoneinfo/Europe/Amsterdam"
  environment:
    TZ: "/usr/share/zoneinfo/Europe/Amsterdam"
    RAILS_ENV: test
    RACK_ENV: test
    NODE_ENV: test
  working_directory: ~/test

build_defaults: &build_defaults
  docker:
    - image: circleci/ruby:2.4.3-node-browsers
  environment:
    TZ: "/usr/share/zoneinfo/Europe/Amsterdam"
    RAILS_ENV: test
    RACK_ENV: test
    NODE_ENV: test
  working_directory: ~/test

version: 2.0

jobs:
  checkout_code:
    <<: *build_defaults
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/test

  build_gems:
    <<: *build_defaults
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
      - run: bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/test/vendor/bundle

  build_js:
    <<: *build_defaults
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  test_rspec:
    <<: *defaults
    environment:
      TZ: "/usr/share/zoneinfo/Europe/Amsterdam"
      RAILS_ENV: test
      RACK_ENV: test
      COVERALLS_PARALLEL: true
    parallelism: 3
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run: bundle --path vendor/bundle
      - run: yarn install
      - run: echo 127.0.0.1 docker.io | sudo tee -a /etc/hosts
      - run: ./bin/chromedriver_install
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -wait tcp://localhost:27017 -wait tcp://localhost:6379 -timeout 1m # Waits for mongo / postgres / redis docker container to be available
      - run: bundle exec rake db:create db:schema:load
      - run: mkdir -p /tmp/workspace
      - run: echo $CIRCLE_BUILD_NUM | tee /tmp/workspace/build_num
      - run:
          name: run tests
          command: |
            mkdir -p /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            echo $TEST_FILES
            bundle exec rspec --format documentation \
                              --format RspecJunitFormatter \
                              --out /tmp/test-results/rspec.xml \
                              -- $(echo "${TEST_FILES}" | sed -e 's/\n/\\n/' -e 's/ /\ /')
      - store_test_results:   # TEST_FILES contains newlines, replace by spaces or we get errors
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - build_num

  test_api:
    <<: *build_defaults
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run: bundle --path vendor/bundle
      - run: yarn install
      - run: echo 127.0.0.1 docker.io | sudo tee -a /etc/hosts
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -wait tcp://localhost:27017 -wait tcp://localhost:6379 -timeout 1m # Waits for mongo / postgres / redis docker container to be available
      - run: bundle exec rake db:create db:schema:load
      - run: mkdir -p /tmp/workspace
      - run: echo $CIRCLE_BUILD_NUM | tee /tmp/workspace/build_num
      - run:
          name: run tests
          command: dredd

  test_js:
    <<: *build_defaults
    steps:
      - restore_cache:
          key: v1-repo-{{ .environment.CIRCLE_SHA1 }}
      - restore_cache:
          name: restore yarn package cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run: yarn install
      - run: yarn test

  test_translations:
    <<: *build_defaults
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run: bundle --path vendor/bundle
      - run: yarn install
      - run: RAILS_ENV=development bin/check_translations.sh

  test_rubocop:
    <<: *build_defaults
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
      - run: bundle --path vendor/bundle
      - run: bundle exec rubocop

  coverage_report:
    <<: *build_defaults
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: complete report
          command: |
            curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$(cat /tmp/workspace/build_num)&payload[status]=done"

workflows:
  version: 2
  commit:
    jobs:
      - checkout_code
      - build_gems:
          requires:
            - checkout_code
      - build_js:
          requires:
            - checkout_code
      - test_rubocop:
          requires:
            - build_gems
      - test_api:
          requires:
            - build_gems
      - test_translations:
          requires:
            - build_js
            - test_rubocop # By waiting until test_rubocop is complete, the bottleneck (test_rspec) can start sooner.
      - test_js:
          requires:
            - test_translations # By waiting until test_translations is complete, the bottleneck (test_rspec) can start sooner.
      - test_rspec:
          requires:
            - build_gems
            - build_js
      - coverage_report:
          requires:
            - test_rspec
