# load docker image & start docker engine
image: docker/compose:alpine-1.29.2
services:
  - docker:20.10.21-dind-alpine3.17

# include:
    # Adds the 'semantic releases' to the release stage
  # - project: 'researchable/general/templates/gitlab/semantic-release'
  #   ref: master
  #   file: 'semantic_release.yml'
  # Adds the 'docker deploy' based on the versions in the semantic relase to the deploy stage
  # - project: 'researchable/general/templates/gitlab/docker-deploy'
  #   ref: master
  #   file: 'docker_deploy.yml'

# define pipline stages
stages:
  - build
  # - test
  - release
  - deploy
  - post-deploy

variables:
  # Workaround for error in DIND:
  KUBE_NAMESPACE: sdv-mvp-$CI_COMMIT_REF_NAME
  DOCKER_TLS_CERTDIR: ''
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  RAILS_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}
  DEPLOY_TAG: $CI_COMMIT_SHA
  PROJECT_NAME: sport-data-valley
  CI: 'true'

  # TODO: (210513) Once gitlab fixes this issue:
  #   https://gitlab.com/gitlab-org/gitlab/-/issues/293674 this variable should
  #   be generated automatically.
  IMAGE: researchableuser/sdv-svc-questionnaires


build_web_job:
  stage:
    build
  before_script:
    - touch .env # TODO: These two lines can be removed, right?
    - echo "PROJECT_NAME=${PROJECT_NAME}" > .env
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD docker.io
  variables:
    RAILS_ENV: production
    NODE_ENV: production
  script:
    - docker build . -t ${RAILS_IMAGE}:${CI_COMMIT_SHA}
    - docker push --all-tags $RAILS_IMAGE
  only:
    refs:
      - master
      - production
      - develop

.deploy_job: &deploy_job
  stage: deploy
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    # Replace the name of the namespace in the configuration of the CI runner.
    # This allows us to also deploy to other namespaces.
    - >-
      sed -i "s/namespace:.*/namespace: "${KUBE_NAMESPACE}"/" $KUBECONFIG
    - echo "Deploying to namespace ${KUBE_NAMESPACE}"
    - create_application_secret
    - kubectl version
    - cd manifests/
    - export CI_COMMIT_REF_NAME_UP=`echo $CI_COMMIT_REF_NAME | awk '{ print toupper($0) }'`
    - echo $CI_COMMIT_REF_NAME_UP
    - sed -i "s/__CI_COMMIT_SHA__/${CI_COMMIT_SHA}/" deployment.yaml ingress_${CI_COMMIT_REF_NAME_UP}.yaml service.yaml worker.yaml cron.yaml
    - sed -i "s/__CI_COMMIT_REF_NAME__/${CI_COMMIT_REF_NAME_UP}/" deployment.yaml ingress_${CI_COMMIT_REF_NAME_UP}.yaml service.yaml worker.yaml cron.yaml
    - sed -i "s/__CI_COMMIT_DOWN_REF_NAME__/${CI_COMMIT_REF_NAME}/" deployment.yaml ingress_${CI_COMMIT_REF_NAME_UP}.yaml service.yaml worker.yaml cron.yaml
    - kubectl apply -f deployment.yaml -f ingress_${CI_COMMIT_REF_NAME_UP}.yaml -f service.yaml -f worker.yaml -f cron.yaml
    - kubectl rollout status -f deployment.yaml
    - kubectl get all,ing -l app=${CI_ENVIRONMENT_SLUG}

# This is needed for gitlab to be able to find the correct kube config
deploy_job:develop:
  <<: *deploy_job
  environment:
    name: develop
  after_script:
    - kubectl scale --replicas=2 deployment/svc-questionnaires -n sdv-mvp-develop
  only:
    refs:
      - develop

# This is needed for gitlab to be able to find the correct kube config
deploy_job:master:
  <<: *deploy_job
  environment:
    name: master
  only:
    refs:
      - master

.deploy_helpers: &deploy_helpers |
  # Extracts variables prefixed with K8S_SECRET_
  # and creates a Kubernetes secret.
  #
  # e.g. If we have the following environment variables:
  #   K8S_SECRET_A=value1
  #   K8S_SECRET_B=multi\ word\ value
  #
  # See: https://gitlab.com/gitlab-org/gitlab-ce/blob/master/lib/gitlab/ci/templates/Jobs/Deploy.gitlab-ci.yml
  #
  # Then we will create a secret with the following key-value pairs:
  #   data:
  #     A: dmFsdWUxCg==
  #     B: bXVsdGkgd29yZCB2YWx1ZQo=
  function create_application_secret() {
    track="${1-stable}"
    export APPLICATION_SECRET_NAME=svc-questionnaires-secret

    env | sed -n "s/^K8S_SECRET_\(.*\)$/\1/p" > k8s_prefixed_variables
    cat k8s_prefixed_variables
    echo "Creating secret $APPLICATION_SECRET_NAME in namespace $KUBE_NAMESPACE on track $track"
    kubectl create secret \
      -n "$KUBE_NAMESPACE" generic "$APPLICATION_SECRET_NAME" \
      --from-env-file k8s_prefixed_variables -o yaml --dry-run |
      kubectl replace -n "$KUBE_NAMESPACE" --force -f -

    export APPLICATION_SECRET_CHECKSUM=$(cat k8s_prefixed_variables | sha256sum | cut -d ' ' -f 1)

    rm k8s_prefixed_variables
  }

before_script:
  - *deploy_helpers
