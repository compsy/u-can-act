var id_a = null;
var timestamp_a = null;
var id_b = null;
var timestamp_b = null;
var id_c = null;
var timestamp_c = null;
var rails_env = '<%= Rails.env.to_s %>';

// This is really a const but we are not ES6 quite yet
var ENTER_KEY = 13;

function toggle_otherwise_field() {
  if ($(this).closest('.row').hasClass('hidden')) return;
  if ($(this).closest('.row').find("input[type=text].otherwise").length === 0) return;
  if ($(this).closest('.row').find('.otherwise-option').is(':checked')) {
    if ($(this).closest('.row').find("input[type=text].otherwise").prop('disabled')) {
      $(this).closest('.row').find("input[type=text].otherwise:visible").prop('disabled', false).focus();
    }
  } else {
    $(this).closest('.row').find("input[type=text].otherwise").prop('disabled', true);
  }
}

function show_hide_entry(entry, show) {
  var klass = '.' + entry + '_toggle';
  if (show) {
    $(klass).removeClass('hidden').find('input:visible,textarea:visible,select:visible,input[type=hidden]').prop('disabled', false);
    $('.otherwise-option').each(toggle_otherwise_field);
  } else {
    $(klass).addClass('hidden').find('input,textarea,select').prop('disabled', true);
  }
}

function sort_inputs_by_checked(inputs) {
  var result = [];

  inputs.each(function (index) {
    if ($(this).is(':checked')) {
      return result.push(inputs[index]);
    }
    result.unshift(inputs[index]);
  })

  return result;
}

function toggle_shown_questions() {
  var inputs = $(this).closest('.row').find('input[data-shows-questions]');

  // The sorting is needed for the case where we have radios with multiple
  // shows questions. It could be the case that eventhough 1 radio shows
  // entries, another one can hide the exact same entries. This is because it
  // passes through the list from top to bottom, instead of the sorted version
  // (unchecked entries first)
  // This means that checked questions get priority
  var sorted_inputs = sort_inputs_by_checked(inputs);

  for (var i = 0; i < sorted_inputs.length; i++) {
    var elem = $(sorted_inputs[i]);
    var this_is_checked = elem.is(':checked');
    elem.data('shows-questions').forEach(function (entry) {
      show_hide_entry(entry, this_is_checked);
    });
  }
}

function toggle_hidden_questions() {
  $(this).closest('.row').find('input[data-hides-questions]').each(function (_index) {
    var this_is_checked = $(this).is(':checked');
    $(this).data('hides-questions').forEach(function (entry) {
      show_hide_entry(entry, !this_is_checked);
    });
  });
}

function time_element() {
  var curid = $(this).attr('id');
  if (curid !== id_c) {
    id_a = id_b;
    timestamp_a = timestamp_b;
    id_b = id_c;
    timestamp_b = timestamp_c;
    id_c = curid;
    timestamp_c = new Date().getTime();
    if (timestamp_a !== null && id_b !== null && id_b !== undefined) {
      var duration = timestamp_b - timestamp_a;
      if (rails_env === 'production') {
        ga('send', 'timing', 'Time to answer question', id_b, duration);
      } else {
        if (rails_env !== 'test') {
          // console.log('send', 'timing', 'Time to answer question', id_b, duration);
        }
      }
      var timingfield = id_b + '_timing';
      if ($('#' + timingfield).length > 0) {
        $('#' + timingfield).val(duration);
      } else {
        $('form').append('<input type="hidden" id="' + timingfield +
          '" name="content[' + timingfield + ']" value="' + duration + '" />');
      }
    }
  } else {
    timestamp_c = new Date().getTime();
  }
}

function addRemoveDisabledClass(buttons, element_class) {
  var currentButton;
  var questionnaireId;
  var elem;
  buttons.each(function (_button) {
    // $(this) is the button
    currentButton = $(this);
    questionnaireId = currentButton.attr('data-belongsto');
    elem = $(element_class + "." + questionnaireId).first();
    if (elem.length <= 0) {
      currentButton.addClass('disabled');
    } else {
      currentButton.removeClass('disabled');
    }
  });
}

function updateExpandableButtons() {
  buttons = $(".expand_expandable")
  addRemoveDisabledClass(buttons, '.expandable_wrapper.hidden')

  buttons = $(".collapse_expandable")
  addRemoveDisabledClass(buttons, '.expandable_wrapper:not(.hidden)')
}

function expandExpandable() {
  var questionnaireId = $(this).attr('data-belongsto');

  // Find the first element that is hidden and expandable so we can unhide it
  var elem = $('.expandable_wrapper.hidden' + '.' + questionnaireId).first();
  elem.removeClass('hidden').find('input,textarea,select').prop('disabled', false);
  $('.otherwise-option').each(toggle_otherwise_field);
  updateExpandableButtons();
}

function collapseExpandable() {
  var questionnaireId = $(this).attr('data-belongsto');

  // Find the last element that is not hidden and expandable so we can hide it
  var elem = $('.expandable_wrapper:not(.hidden)' + '.' + questionnaireId).last();
  elem.addClass('hidden').find('input,textarea,select').prop('disabled', true);
  $('.otherwise-option').each(toggle_otherwise_field);
  updateExpandableButtons();
}

function changeExpansions() {
  var expandableId = $(this).parent().attr('data-expandable');
  var newExpansions = parseInt($(this).val());
  var curExpansions = $('.expandable_wrapper:not(.hidden)' + '.' + expandableId).length
  while (newExpansions > curExpansions) {
    $('#' + expandableId + '_expand').click();
    curExpansions+= 1;
  }
  while (newExpansions < curExpansions) {
    $('#' + expandableId + '_collapse').click();
    curExpansions -= 1;
  }
}

function changeActiveLabel() {
  const value = $(this).val();
  const rangeValueLabel = $(this).closest('.range-container').find('.range-value-label').first()
  $(this).closest('.col.s12').find('.label-row .col, .range-labels-vertical .vertical-range-label').each(function (_index) {
    if (parseFloat($(this).data('value')) === parseFloat(value)) {
      $(rangeValueLabel).text($(this).text())
      $(this).addClass('active')
    } else {
      $(this).removeClass('active')
    }
  })
}

function disableHiddenInputs() {
  $('.hidden').each(function (_index) {
    $(this).find('input,textarea,select').each(function (_sub_index) {
      $(this).prop('disabled', true);
    });
  });
}

function check_required_controls(event) {
  var returnval = true;
  var firstelem = null;
  var topOffset = 100000;
  $('div.radio-group.required:visible').each(function (_sub_index) {
    if ($(this).find(':radio:checked').length === 0) {
      event.preventDefault();
      $(this).addClass('erroneous');
      if (firstelem == null || $(this).offset().top < topOffset) {
        firstelem = this;
        topOffset = $(firstelem).offset().top;
      }
      returnval = false;
    }
  });
  $('div.checkbox-group.required:visible').each(function (_sub_index) {
    if ($(this).find(':checkbox:checked').length === 0) {
      event.preventDefault();
      $(this).addClass('erroneous');
      if (firstelem == null || $(this).offset().top < topOffset) {
        firstelem = this;
        topOffset = $(firstelem).offset().top;
      }
      returnval = false;
    }
  });
  $('div.range-container.required.notchanged:visible').each(function (_sub_index) {
    event.preventDefault();
    $(this).addClass('erroneous');
    if (firstelem == null || $(this).offset().top < topOffset) {
      firstelem = this;
      topOffset = $(firstelem).offset().top;
    }
    returnval = false;
  });
  if (!returnval) { // scroll to the first invalid element
    $('html, body').animate({
      scrollTop: topOffset
    }, 200);
  }
  return returnval;
}

function autoResizeImages() {
  var ffactor = 0.8; // percentage of screen to be filled
  var browserwidth = $(window).width();
  var browserheight = $(window).height();
  $("img.auto-resize").each(function () {
    ratio = parseFloat($(this).data('ratio'));
    if (!ratio) return true; // next
    if ((browserheight / browserwidth) > ratio) {
      $(this).width(ffactor * browserwidth);
      $(this).height(ffactor * browserwidth * ratio);
    } else {
      $(this).height(ffactor * browserheight);
      $(this).width(ffactor * browserheight / ratio);
    }
  });
}

function removeNotChanged () {
  $(this).closest('.notchanged').removeClass('notchanged').removeClass('erroneous');
}

const hideThumbs = () => {
  for (const elem of document.querySelectorAll('.thumb.active')) {
    setTimeout(() => {
      elem.style.height = '0px'
      elem.style.width = '0px'
      elem.classList.remove('active')
    }, 500)
  }
}

const updateRangeValue = (e) => {
  const rangeObj = $(e.target).closest('.row').find('input[type=range]')
  rangeObj.val($(e.target).data('value'))
  removeNotChanged.call(rangeObj)
  changeActiveLabel.call(rangeObj)
}

function questionnaireLoaded() {
  timestamp_c = new Date().getTime();
  const array_of_dom_elements = document.querySelectorAll('input[type=range]')
  M.Range.init(array_of_dom_elements)
  $('input[type=radio],input[type=checkbox]').change(toggle_shown_questions).change(toggle_otherwise_field).change(toggle_hidden_questions);
  $('.notchanged input[type=range]').change(removeNotChanged).click(removeNotChanged);
  $(document).on('touchstart', '.notchanged input[type=range]', removeNotChanged);
  $('input[type=radio][data-shows-questions],input[type=checkbox][data-shows-questions]').each(toggle_shown_questions);
  // The line below breaks stuff, just assume that the questionnaire visibilities are correct by default
  //$('input[type=radio][data-hides-questions],input[type=checkbox][data-hides-questions]').each(toggle_hidden_questions);
  $('.otherwise-option').each(toggle_otherwise_field);
  $('label + div.input-field.inline').click(function () {
    if ($(this).find('input[type=text][disabled]').length) {
      $(this).prev().click();
    }
  });
  $('input[type=text],input[type=number]').keypress(function (event) {
    if (event.keyCode === ENTER_KEY) {
      event.preventDefault();
      $(this).blur();
    }
  });
  $('input,textarea,select').change(time_element);
  $('textarea').focusin(time_element);
  $('button[type=submit]').click(time_element).click(check_required_controls);

  $('.expand_expandable').on('click', expandExpandable);
  $('.collapse_expandable').on('click', collapseExpandable);
  updateExpandableButtons();
  disableHiddenInputs();

  // Needed to disable the warning when leaving a page, when actually submitting it
  $(document).on("submit", "form", function (_event) {
    window.onbeforeunload = null;
  });
  $(document).on("click", ".navigate-away-allowed", function (_event) {
    window.onbeforeunload = null;
  });
  // Hide toasts on click
  $(document).on('click', '.toast', function () {
    $(this).hide();
  });
  $(document).on('click', '.vertical-range-label', updateRangeValue);
  $(document).on('input', '.range-container input[type="range"]', changeActiveLabel);
  $(document).on('input', '.range-container input[type="range"]', removeNotChanged);
  $(document).on('change', '.links_to_expandable>input[type="number"]', changeExpansions);
  $(document).on('click', '.erroneous', function () {
    $(this).removeClass('erroneous');
  });
  $(document).on('touchstart', 'body', function (e) {
    if ($(':focus').hasClass('select-dropdown')) return;
    var keyboardDoms = new Set(["INPUT", "TEXTAREA", "SELECT"]);
    if (keyboardDoms.has(document.activeElement.nodeName) && !keyboardDoms.has(e.target.nodeName))
      document.activeElement.blur();
  });
  $(document).on('touchend', 'body', hideThumbs);

  // Handle flash notices
  $('.flash-notice').delay(10000).slideUp('slow');
  $(document).on('click', '.flash-notice', function () {
    $(this).hide();
  });

  // Automatically rescale images in toasts
  autoResizeImages();
  $(window).resize(function () {
    autoResizeImages();
  });
}

$(function () {
  questionnaireLoaded();
});
