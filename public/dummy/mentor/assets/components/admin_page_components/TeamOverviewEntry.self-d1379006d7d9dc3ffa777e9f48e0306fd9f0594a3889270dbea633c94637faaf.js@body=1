var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TeamOverviewEntry = (function (_React$Component) {
  _inherits(TeamOverviewEntry, _React$Component);

  function TeamOverviewEntry() {
    _classCallCheck(this, TeamOverviewEntry);

    _get(Object.getPrototypeOf(TeamOverviewEntry.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(TeamOverviewEntry, [{
    key: 'generateOverviewRows',
    value: function generateOverviewRows(overview, overviewName) {
      var rows = [];
      var cols = [];
      var entry;
      for (var i = 0, len = overview.length; i < len; i++) {
        cols = [];
        entry = overview[i];
        cols.push(React.createElement(
          'td',
          { key: entry.name + '_name' },
          entry.name
        ));
        cols.push(React.createElement(
          'td',
          { key: entry.name + '_completion' },
          entry.completed
        ));
        cols.push(React.createElement(
          'td',
          { key: entry.name + '_percentage_completion' },
          entry.percentage_completed,
          '%'
        ));
        cols.push(React.createElement(
          'td',
          { key: entry.name + '_met_threshold_completion' },
          entry.met_threshold_completion
        ));
        cols.push(React.createElement(
          'td',
          { key: entry.name + '_percentage_above_threshold' },
          entry.percentage_above_threshold,
          '%'
        ));
        rows.push(React.createElement(
          'tr',
          { key: entry.name + '_' + overviewName },
          cols
        ));
      }
      return rows;
    }
  }, {
    key: 'generateTable',
    value: function generateTable(rows) {
      return React.createElement(
        'table',
        null,
        React.createElement(
          'thead',
          null,
          React.createElement(
            'tr',
            null,
            React.createElement(
              'th',
              null,
              ' Team'
            ),
            React.createElement(
              'th',
              null,
              ' Completed'
            ),
            React.createElement(
              'th',
              null,
              ' Completed percentage'
            ),
            React.createElement(
              'th',
              null,
              ' ≥ 70% completed questionnaires'
            ),
            React.createElement(
              'th',
              null,
              ' % of mentors with ≥ 70% completed questionnaires'
            )
          )
        ),
        React.createElement(
          'tbody',
          null,
          rows
        )
      );
    }
  }, {
    key: 'createOverview',
    value: function createOverview(overview, overviewTitle) {
      var rows = this.generateOverviewRows(this.props.overview);

      return React.createElement(
        'div',
        { className: 'col m12 l6' },
        React.createElement(
          'h4',
          null,
          ' ',
          overviewTitle,
          ' '
        ),
        this.generateTable(rows)
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var rendering = this.createOverview(this.props.overview, this.props.name);
      return rendering;
    }
  }]);

  return TeamOverviewEntry;
})(React.Component);