var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Select = (function (_React$Component) {
  _inherits(Select, _React$Component);

  function Select(props) {
    _classCallCheck(this, Select);

    _get(Object.getPrototypeOf(Select.prototype), "constructor", this).call(this, props);
    this.uuid = this.uuid();
  }

  _createClass(Select, [{
    key: "generateSelect",
    value: function generateSelect(items) {
      var selectorOptions = items.map(function (option) {
        return React.createElement(
          "option",
          { key: option },
          option
        );
      });
      selectorOptions.unshift(React.createElement(
        "option",
        { key: "def", value: "def", disabled: true },
        "Selecteer"
      ));

      return selectorOptions;
    }
  }, {
    key: "uuid",
    value: function uuid() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0,
            v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    }
  }, {
    key: "redraw",
    value: function redraw() {
      var select = $('#' + this.uuid);
      select.material_select(this._onChange.bind(this));
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.redraw();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.redraw();
    }
  }, {
    key: "_onChange",
    value: function _onChange(e) {
      var selected_option = $('#' + this.uuid).find(":selected").text();
      this.props.onChange(selected_option);
    }
  }, {
    key: "render",
    value: function render() {
      var options = this.generateSelect(this.props.options);
      return React.createElement(
        "div",
        { className: "input-field" },
        React.createElement(
          "select",
          { id: this.uuid, defaultValue: this.props.value },
          options
        ),
        React.createElement(
          "label",
          null,
          this.props.label
        )
      );
    }
  }]);

  return Select;
})(React.Component);